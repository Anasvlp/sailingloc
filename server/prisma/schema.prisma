generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  VISITOR
  USER
  SELLER
  ADMIN
}

enum BoatCategory {
  SAILBOAT
  CATAMARAN
  MOTORBOAT
  RIB
}

enum BoatType {
  MONOHULL
  MULTIHULL
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  password    String
  firstName   String
  lastName    String
  phone       String?
  avatar      String?
  role        UserRole @default(USER)
  isVerified  Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  boats       Boat[]
  bookings    Booking[]
  reviews     Review[]
  favorites   Favorite[]
  sentMessages     Message[] @relation("SentMessages")
  receivedMessages Message[] @relation("ReceivedMessages")
  
  @@map("users")
}

model Location {
  id        String   @id @default(cuid())
  name      String
  country   String
  region    String?
  latitude  Float
  longitude Float
  createdAt DateTime @default(now())
  
  // Relations
  boats     Boat[]
  
  @@map("locations")
}

model Boat {
  id            String       @id @default(cuid())
  title         String
  description   String
  category      BoatCategory
  type          BoatType
  brand         String
  model         String
  year          Int
  length        Float
  capacity      Int
  cabins        Int?
  bathrooms     Int?
  pricePerDay   Float
  deposit       Float
  images        String[]
  equipment     String[]
  rules         String[]
  isActive      Boolean      @default(true)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  
  // Foreign keys
  ownerId       String
  locationId    String
  
  // Relations
  owner         User         @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  location      Location     @relation(fields: [locationId], references: [id])
  bookings      Booking[]
  reviews       Review[]
  favorites     Favorite[]
  availabilities Availability[]
  
  @@map("boats")
}

model Availability {
  id        String   @id @default(cuid())
  date      DateTime
  isBlocked Boolean  @default(false)
  price     Float?   // Prix sp√©cifique pour cette date
  
  // Foreign keys
  boatId    String
  
  // Relations
  boat      Boat     @relation(fields: [boatId], references: [id], onDelete: Cascade)
  
  @@unique([boatId, date])
  @@map("availabilities")
}

model Booking {
  id          String        @id @default(cuid())
  startDate   DateTime
  endDate     DateTime
  totalPrice  Float
  deposit     Float
  status      BookingStatus @default(PENDING)
  guestCount  Int
  message     String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  
  // Foreign keys
  userId      String
  boatId      String
  
  // Relations
  user        User          @relation(fields: [userId], references: [id])
  boat        Boat          @relation(fields: [boatId], references: [id])
  payment     Payment?
  review      Review?
  
  @@map("bookings")
}

model Payment {
  id              String        @id @default(cuid())
  amount          Float
  currency        String        @default("EUR")
  status          PaymentStatus @default(PENDING)
  stripePaymentId String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  
  // Foreign keys
  bookingId       String        @unique
  
  // Relations
  booking         Booking       @relation(fields: [bookingId], references: [id])
  
  @@map("payments")
}

model Review {
  id          String   @id @default(cuid())
  rating      Int      // 1-5
  comment     String?
  cleanliness Int
  accuracy    Int
  communication Int
  location    Int
  value       Int
  createdAt   DateTime @default(now())
  
  // Foreign keys
  userId      String
  boatId      String
  bookingId   String   @unique
  
  // Relations
  user        User     @relation(fields: [userId], references: [id])
  boat        Boat     @relation(fields: [boatId], references: [id])
  booking     Booking  @relation(fields: [bookingId], references: [id])
  
  @@map("reviews")
}

model Favorite {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  
  // Foreign keys
  userId    String
  boatId    String
  
  // Relations
  user      User     @relation(fields: [userId], references: [id])
  boat      Boat     @relation(fields: [boatId], references: [id])
  
  @@unique([userId, boatId])
  @@map("favorites")
}

model Message {
  id        String   @id @default(cuid())
  content   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  
  // Foreign keys
  senderId  String
  receiverId String
  
  // Relations
  sender    User     @relation("SentMessages", fields: [senderId], references: [id])
  receiver  User     @relation("ReceivedMessages", fields: [receiverId], references: [id])
  
  @@map("messages")
}